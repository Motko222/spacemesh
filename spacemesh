#!/bin/bash
# usage
# sm activate 1
# sm report 2

source $HOME/include

c=$1
id=$2

if [ -z $c ]
then
echo "--- SPACEMESH --- ----------------"
 echo "1 report         11 status"
 echo "2 start          12 "
 echo "3 stop           13 "
 echo "4 log            14 "
 echo "5 install        15 "
 echo "6                16 "
 echo "7 profiler       17 "
 echo "8 config         18 activate"
 echo "9 edit           19 deactivate"
 echo "---------------- -----------------"
 read -p "? " c
fi

cd $smbase

case $c in
0|activate)
 case $id in
  1) config="./config1.json"; smdata="./sm_data_1"; lock="/tmp/spacemesh1.lock"; port1=7513 ;port2=9092; port3=9093; port4=9094 ;;
  2) config="./config2.json"; smdata="./sm_data_2"; lock="/tmp/spacemesh2.lock"; port1=7514 ;port2=9192; port3=9193; port4=9194 ;;
 esac
;;

1|report)
        if [ -z $id ]; then read -p "node? " id; fi
        source ~/spacemesh activate $id
        temp=~/data/spacemesh$id.txt
        pid=$(ps aux | grep spacemesh | grep $port1 | awk '{print $2}')
        network="mainnet"
        version=$(cat ~/logs/spacemesh$id.log | grep -a 'App version' | tail -1| awk -F 'App version: ' '{print $2}' | awk '{print $1}')
        json=$(./grpcurl --plaintext -d "{}" localhost:$port2 spacemesh.v1.NodeService.Status)
        peers=$(echo $json | jq .status.connectedPeers | sed 's/"//g')
        syncedlayer=$(echo $json | jq .status.syncedLayer.number | sed 's/"//g')
        toplayer=$(echo $json | jq .status.topLayer.number | sed 's/"//g')
        verifiedlayer=$(echo $json | jq .status.verifiedLayer.number | sed 's/"//g')
        issynced=$(echo $json | jq .status.isSynced | sed 's/"//g')
        issmeshing=$(./grpcurl -d '{}' -plaintext localhost:$port3 spacemesh.v1.SmesherService.IsSmeshing | jq .isSmeshing)
        foldersize=$(du -hs $smbase | awk '{print $1}')
        logsize=$(du -hs $HOME/logs/spacemesh$id.log | awk '{print $1}')

        stxatus="ok";
        if [ "$issynced" = "true" ]; then status="ok" ; else status="error";note="node not synced"; fi
        if [ "$issmeshing" = "true" ]; then status="ok"; else status="error";note="node not smeshing"; fi
        if [ -z $pid ]; then status="error";note="process not running"; fi

        echo "--- SPACEMESH NODE $id ---"
        echo "updated:           " $now
        echo "network:           " $network
        echo "type:              " $type
        echo "version:           " $version
        echo "status:            " $status
        echo "synced layer:      " $syncedlayer
        echo "top layer:         " $toplayer
        echo "verified layer:    " $verifiedlayer
        echo "peers:             " $peers
        echo "note:              " $note
        echo "is synced:         " $issynced
        echo "is smeshing:       " $issmeshing
 
        echo "updated='"$now"'" >$temp
        echo "version='"$version"'" >>$temp
        echo "process='"$pid"'" >>$temp
        echo "status="$status >>$temp
        echo "note='"$note"'" >>$temp
        echo "network='"$network"'" >>$temp
        echo "type="$type >>$temp
        echo "folder="$foldersize >>$temp
        echo "log="$logsize >>$temp

        cp $temp $report
        cp $temp $report
;;

2|start)
  if [ -z $id ]; then read -p "node? " id; fi
  source ~/spacemesh activate $id
  pid=$(ps aux | grep spacemesh | grep "$port1" | awk '{print $2}')
  kill $pid
  sleep 5s
  echo "Starting node $id..."
  #./go-spacemesh --listen /ip4/0.0.0.0/tcp/7514 --config ./config2.json -d ./sm_data_2 --filelock /tmp/spacemesh2.lock > ~/logs/spacemesh2.log 2>&1 &
  ./go-spacemesh --listen /ip4/0.0.0.0/tcp/$port1 --config $config -d $smdata --filelock $lock > ~/logs/spacemesh$id.log 2>&1 &
  ps aux | grep spacemesh | grep "$port1"
;;

3|stop)
  if [ -z $id ]; then read -p "node? " id; fi
  source ~/spacemesh activate $id
  pid=$(ps aux | grep spacemesh | grep "$port1" | awk '{print $2}')
  kill $pid
;;


4|log)
  if [ -z $id ]; then read -p "node? " id; fi
  tail -f ~/logs/spacemesh$id.log
;;

5|install)
 read -p "Sure?" c
 case $c in
 y)
  echo "removing old files..."
  cd $smbase
  rm go-spacemesh libpost.so profiler
  echo "Get latest release from here: https://github.com/spacemeshos/go-spacemesh/releases"
  read -p "URL? " url
  echo "downloading..."
  wget $url
  unzip -j Linux.zip
  echo "setting permissions..."
  chmod 777 go-spacemesh
  echo "deleting zip..."
  rm Linux.zip
  echo "done."
 ;;
 esac
 ;;

7|profiler)
read -p "threads? " threads
read -p "nonces? " nonces
read -p "path? " path
./profiler --data-size 1 --threads=$threads --data-file $path/data.bin --nonces=$nonces
;;

9|edit) nano $master/spacemesh ;;

11|status)
        if [ -z $id ]; then read -p "node? " id; fi
        source ~/spacemesh activate $id
        ./grpcurl --plaintext -d "{}" localhost:$port2 spacemesh.v1.NodeService.Status
        ./grpcurl --plaintext -d "{}" localhost:$port3 spacemesh.v1.SmesherService.PostSetupStatus
        ./grpcurl -d '{}' -plaintext localhost:$port3 spacemesh.v1.SmesherService.IsSmeshing
        ./grpcurl -plaintext 127.0.0.1:$port2 spacemesh.v1.ActivationService.Highest
;;

18|activate)
if [ -z $id ]; then read -p "node? " id; fi
echo "bash ~/spacemesh report $id" >>~/scripts/launch
;;

19|deactivate)
  if [ -z $id ]; then read -p "node? " id; fi
  sed -i '/spacemesh report $id/d' ~/scripts/launch
  rm $report/spacemesh$id.txt
;;


*) echo "unknown command" ;;

esac
